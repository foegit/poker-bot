const GError = require('./gError');

module.exports = class GChecker {
  constructor(game) {
    this.game = game;
  }

  bet(player, sum) {
    const { game } = this;
    const { currCircle } = game;
    let error;

    switch (true) {
      case (currCircle.bet !== 0):
        error = `–ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞–≤–∫–∞ —É–∂–µ –∑—Ä–æ–±–ª–µ–Ω–∞: ${currCircle.bet}.\n${game.getAvailableMoves(player)})`;
        break;
      case (!sum): // '', undefined, NaN
        error = '–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Å—É–º—É —Å—Ç–∞–≤–∫–∏.\n***/bet*** sum';
        break;
      case (typeof sum !== 'number'):
        error = '–°—Ç–∞–≤–∫–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º';
        break;
      case (!Number.isInteger(sum)):
        error = '–°—É–º–∞ —Å—Ç–∞–≤–∫–∏ –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º.';
        break;
      case (sum <= game.minBet):
        error = `–°—Ç–∞–≤–∫–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ ${game.minBet}.`;
        break;
      case (sum > game.maxBet):
        error = `–°—Ç–∞–≤–∫–∞ –º–∞—î –±—É—Ç–∏ –º–µ–Ω—à–µ ${game.maxBet}.`;
        break;
      case (sum > player.getBalance()):
        error = `–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ üç™ –¥–ª—è —Ç–∞–∫–æ—ó —Å—Ç–∞–≤–∫–∏. –í–∞—à –±–∞–ª–∞–Ω—Å: ${player.getBalance()}üç™`;
        break;
      default: return false;
    }

    return new GError(player, error);
  }
};
