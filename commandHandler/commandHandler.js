const PlayerContoller = require('../controllers/player');
const GameController = require('../controllers/game');

const Sender = require('../controllers/sender');
const Logger = require('../controllers/logger');
const { spacer } = require('../controllers/utils');

class CommandHandler {
  constructor() {
    this.playerController = PlayerContoller;
    this.gameController = GameController;

    this.start = this.start.bind(this);
    this.game = this.game.bind(this);
    this.join = this.join.bind(this);
    this.here = this.here.bind(this);
    this.say = this.say.bind(this);
    this.handler = this.handler.bind(this);
  }

  static isCommand(text) {
    if (text.length < 2) {
      return false;
    }
    if (text[0] !== '/') {
      return false;
    }
    return true;
  }

  static getCommand(text) {
    if (!CommandHandler.isCommand(text)) {
      return false;
    }

    return text.split(' ')[0];
  }

  static getParams(ctx) {
    const cmd = ctx.message.text;
    if (cmd.length < 2 || cmd[0] !== '/' || cmd[1] === ' ') {
      return false;
    }
    return cmd.split(' ').slice(1);
  }

  static getParam(ctx) {
    return CommandHandler.getParams(ctx)[0];
  }

  async getPlayer(ctx) {
    const player = await this.playerController.getPlayer(ctx);
    return player;
  }

  getGameByTitle(title) {
    const game = this.gameController.getGameByTitle(title);
    return game;
  }

  getGameById(id) {
    const game = this.gameController.getGameById(id);
    return game;
  }

  async handler(ctx) {
    const command = CommandHandler.getCommand(ctx.message.text);

    if (!command) {
      return;
    }

    Logger.cmd(ctx);
    switch (command) {
      case '/start': await this.start(ctx); break;
      case '/game': await this.game(ctx); break;
      case '/gamelist': await this.gamelist(ctx); break;
      case '/join': await this.join(ctx); break;
      case '/here': await this.here(ctx); break;
      case '/say': await this.say(ctx); break;
      case '/cube': await CommandHandler.cube(ctx); break;

      default: CommandHandler.unknown(ctx); break;
    }
  }


  async start(ctx) {
    const player = await this.getPlayer(ctx);
    const geetingMsg = `üëã –ü—Ä–∏–≤—ñ—Ç, ***${player.getTitle()}***!\n–¢–≤—ñ–π –±–∞–ª–∞–Ω—Å ${player.balance}`;
    await Sender.toPlayer(player, geetingMsg);
  }

  async game(ctx) {
    const player = await this.getPlayer(ctx);

    if (player.gameId) {
      Sender.error(ctx, '–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –≥—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–∫–∏–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω—É.');
      return;
    }

    const title = CommandHandler.getParam(ctx);

    if (!title) {
      Sender.error(ctx, '–ü–æ—Ç–±—Ä—ñ–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–∞–∑–≤—É –≥—Ä–∏.\n/game ___–Ω–∞–∑–≤–∞___ - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É ');
      return;
    }

    if (title.length < 3) {
      Sender.error(ctx, '–ù–∞–∑–≤–∞ –≥—Ä–∏ –ø–æ–≤–∏–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
      return;
    }

    if (title.length > 10) {
      Sender.error(ctx, '–ù–∞–∑–≤–∞ –≥—Ä–∏ –ø–æ–≤–∏–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –º–∞–∫—Å–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–∞');
      return;
    }

    const game = await this.gameController.createGame(player, title);
    player.joinTo(game.id);
    Sender.success(ctx, `–ì—Ä–∞ –≤–¥–∞–ª–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞.\n/join ${game.title} - —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ –≥—Ä–∏.`);
  }

  async gamelist(ctx) {
    const { games } = this.gameController;

    if (games.length === 0) {
      Sender.sendMessage(ctx, 'üëæ –ü–æ–∫–∏ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —ñ–≥–æ—Ä.\n‚ñ´Ô∏è ***/game <–Ω–∞–∑–≤–∞>*** - —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É.');
      return;
    }

    let list = `üß§ ***–°–ø–∏—Å–æ–∫ —ñ–≥—Ä:***\n\n${spacer('#', 3)} ${spacer('–ê–¥–º—ñ–Ω', 12)} ${spacer('–°—Ç—ñ–ª', 15)} –ì—Ä–∞–≤—Ü—ñ\n`;
    list += `${spacer('', 50, '-')}\n`;
    for (let i = 0; i < games.length; i += 1) {
      const number = spacer(`${(i + 1)}`, 3);
      const admin = spacer(`@${games[i].owner.username}`, 12);
      const table = spacer(games[i].title, 15);
      const limit = `[${games[i].players.length}/10]`;

      list += `${number} ${admin} ***${table}*** ${limit}\n`;
    }

    Sender.sendMessage(ctx, list);
  }

  async join(ctx) {
    const player = await this.getPlayer(ctx);
    const gameTitle = CommandHandler.getParam(ctx);
    const game = this.getGameByTitle(gameTitle);

    if (!game) {
      Sender.error(ctx, '–ì—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    if (game.players.length >= 10) {
      Sender.error(ctx, '–£ —Ü—ñ–π –≥—Ä—ñ –º–∞–∫—Å–∏–º—É–º —É—á–∞—Å–Ω–∏–∫—ñ–≤ - 10.');
      return;
    }

    if (player.gameId) {
      const currGame = this.gameController.getGameById(player.gameId);
      if (player.gameId === game.id) {
        Sender.sendMessage(ctx, '–í–∏ –≤–∂–µ –≤ —Ü—ñ–π –≥—Ä—ñ.');
        return;
      }
      if (currGame) {
        Sender.error(ctx, `–î–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –Ω–æ–≤–æ—ó –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–æ–∫–∏–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω—É - ${currGame.title}\n‚ñ´Ô∏è ***/leave*** - —â–æ–± –ø–æ–∫–∏–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –≥—Ä—É.`);
        return;
      }
    }

    player.gameId = game.id;
    game.join(player);

    Sender.success(ctx, '–í–∏ –≤–¥–∞–ª–æ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—å –¥–æ –≥—Ä–∏.\n‚ñ´Ô∏è ***/here*** - —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤.');
  }

  async here(ctx) {
    const player = await this.getPlayer(ctx);

    if (!player.gameId) {
      Sender.error(ctx, '–í–∏ –Ω–µ –≥—Ä–∞—î—Ç–µ –≤ –∂–æ–¥–Ω—É –≥—Ä—É.\n‚ñ´Ô∏è ***/gamelist*** - —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ —ñ–≥—Ä.');
      return;
    }

    const game = this.getGameById(player.gameId);

    const { players } = game;

    let list = `üß§ ***–°–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤:***\n\n${spacer('#', 3)} –ì—Ä–∞–≤–µ—Ü—å\n`;
    list += `${spacer('', 50, '-')}\n`;
    for (let i = 0; i < players.length; i += 1) {
      const number = spacer(`${(i + 1)}`, 3);
      const playerTitle = spacer(`${players[i].getTitle()}`, 12);
      const isAdmin = players[i].tid === game.owner.tid ? '‚≠êÔ∏è' : '';
      list += `${number} ***${playerTitle}*** ${isAdmin}\n`;
    }

    Sender.sendMessage(ctx, list);
  }

  async say(ctx) {
    const player = await this.getPlayer(ctx);
    if (!player.gameId) {
      Sender.error(ctx, '–í–∏ –Ω–µ –≥—Ä–∞—î—Ç–µ –≤ –∂–æ–¥–Ω—É –≥—Ä—É.');

      return;
    }

    const game = this.getGameById(player.gameId);
    const message = CommandHandler.getParams(ctx).join(' ');
    const players = game.players.filter(p => p.tid !== player.tid);

    const sendQueue = [];
    players.forEach(p => sendQueue.push(Sender.toPlayer(p, `***${player.getTitle()}:*** ${message}`)));

    await Promise.all(sendQueue);
  }

  static unknown(ctx) {
    Sender.error(ctx, `–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: ___${ctx.message.text}___`);
  }

  static cube(ctx) {
    const cube = (Date.now() % 6) + 1;

    Sender.sendMessage(ctx, `üé≤ ${cube}`);
  }
}

module.exports = CommandHandler;
