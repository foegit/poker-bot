const shortid = require('shortid');

// const Player = require('../db/models/player');
const Game = require('../poker/game');

const PlayerConttoller = require('./player');

const {
  getParam,
  Sender,
  spacer,
  cmdParam,
} = require('./utils');


class GameController {
  constructor() {
    this.games = [];
    this.playerController = new PlayerConttoller().getInstance();

    this.createGame = this.createGame.bind(this);
    this.gameList = this.gameList.bind(this);
    this.auth = this.auth.bind(this);
    this.createGame = this.createGame.bind(this);
    this.getGameById = this.getGameById.bind(this);
    this.getGameByTitle = this.getGameByTitle.bind(this);
    this.joinGame = this.joinGame.bind(this);
    this.leaveGame = this.leaveGame.bind(this);
  }

  async auth(ctx) {
    let player = await this.playerController.getPlayer(ctx);
    if (!player) {
      player = await this.playerController.wakeUp(ctx, false);
    }
    return player;
  }

  async createGame(ctx) {
    const player = await this.auth(ctx);
    const title = getParam(ctx.message.text)[0];

    if (!title) {
      Sender.error(ctx, '–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–∞–∑–≤—É.\n‚ñ´Ô∏è ***/poker <–Ω–∞–∑–≤–∞>***');
      return;
    }

    for (let i = 0; i < this.games.length; i += 1) {
      if (this.games[i].title === title) {
        Sender.error(ctx, '–¢–∞–∫–∞ –Ω–∞–∑–≤–∞ —É–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è');
        return;
      }
      if (this.games[i].owner.gameId === player.gameId) {
        Sender.error(ctx, `–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—à–æ—ó –≥—Ä–∏ –ø–æ–∫–∏–Ω—å—Ç–µ –ø–æ—Ç–æ—á–Ω—É.\n ‚ñ´Ô∏è ***/leave*** - –ø–æ–∫–∏–Ω—É—Ç–∏ ***${this.games[i].title}***`);
        return;
      }
    }

    const id = shortid.generate();
    player.joinTo(id);
    const game = new Game(id, title, player);
    this.games.push(game);
    await Sender.ok(ctx, `–ì—Ä–∞ –≤–¥–∞–ª–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!\n‚ñ´Ô∏è /join ***${game.title}*** - –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ –≥—Ä–∏.`);
  }

  async deleteGame(ctx) {
    const gameId = getParam(ctx.message.from);
    this.games = this.games.filter(game => game.id !== gameId);
  }

  gameList(ctx) {
    const { games } = this;

    if (games.length === 0) {
      Sender.msg(ctx, '–ü–æ–∫–∏ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —ñ–≥–æ—Ä.\n‚ñ´Ô∏è ***/poker <–Ω–∞–∑–≤–∞>*** - —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É.');
      return;
    }

    let list = `üß§ ***–°–ø–∏—Å–æ–∫ —ñ–≥—Ä:***\n\n${spacer('#', 3)} ${spacer('–ê–¥–º—ñ–Ω', 12)} ${spacer('–°—Ç—ñ–ª', 15)} –ì—Ä–∞–≤—Ü—ñ\n`;
    list += `${spacer('', 50, '-')}\n`;
    for (let i = 0; i < games.length; i += 1) {
      const number = spacer(`${(i + 1)}`, 3);
      const admin = spacer(`@${games[i].owner.username}`, 12);
      const table = spacer(games[i].title, 15);
      const limit = `[${games[i].players.length}/10]`;

      list += `${number} ${admin} ***${table}*** ${limit}\n`;
    }

    Sender.msg(ctx, list);
  }

  getGameById(gameId) {
    return (this.games.find(g => g.id === gameId) || false);
  }

  getGameByTitle(gameTitle) {
    return (this.games.find(g => g.title === gameTitle) || false);
  }

  async joinGame(ctx) {
    const player = await this.auth(ctx);
    if (!player) {
      return false;
    }
    const gameTitle = cmdParam(ctx);
    if (!gameTitle) {
      Sender.error(ctx, '–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–∞–∑–≤—É –≥—Ä–∏.\n‚ñ´Ô∏è ***/join <–Ω–∞–∑–≤–∞>*** - —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ –≥—Ä–∏.');
      return false;
    }
    const game = this.getGameByTitle(gameTitle);
    if (!game) {
      Sender.error(ctx, '–ì—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n‚ñ´Ô∏è ***/join <–Ω–∞–∑–≤–∞>*** - —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ –≥—Ä–∏.');
      return false;
    }
    if (game.id === player.gameId) {
      Sender.error(ctx, '–í–∏ —É–∂–µ –≤ —Ü—ñ–π –≥—Ä—ñ.');
      return false;
    }
    game.join(player);
    player.joinTo(game.id);
    Sender.ok(ctx, `–í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—å –¥–æ –≥—Ä–∏ ${game.title}.\n‚ñ´Ô∏è ***/leave*** - –ø–æ–∫–∏–Ω—É—Ç–∏ –≥—Ä—É.\n\n‚ñ´Ô∏è ***/whothere*** - —Å–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤.`);
    return game;
  }

  async leaveGame(ctx) {
    console.log('ahah');
    const player = await this.auth(ctx);
    if (!player) {
      return false;
    }
    if (player.gameId === null) {
      Sender.error(ctx, '–í–∏ –Ω–µ –≥—Ä–∞—î—Ç–µ.');
    }

    const game = this.getGameById(player.gameId);
    if (!game) {
      return false;
    }

    game.leave(player);
    player.leaveGame();

    Sender.ok(ctx, '–í–∏ –ø–æ–∫–∏–Ω—É–ª–∏ –≥—Ä—É.');
    return game;
  }
}

module.exports = GameController;
