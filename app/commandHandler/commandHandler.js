// const PlayerContoller = require('../controllers/player');
// const GameController = require('../controllers/game');
const Sender = require('../controllers/sender');
const Logger = require('../controllers/logger');
const Text = require('../messeges/messege');

const { spacer } = require('../controllers/utils');
const Parser = require('./parser');
const moveType = require('../const/move');

const PlayerModel = require('../db/models/player');

class CommandHandler {
  constructor(logger, sender) {
    this.logger = logger;
    this.sender = sender;


    this.playerController = PlayerContoller;
    this.gameController = GameController;

    this.start = this.start.bind(this);
    this.game = this.game.bind(this);
    this.join = this.join.bind(this);
    this.here = this.here.bind(this);
    this.say = this.say.bind(this);
    this.handler = this.handler.bind(this);
  }

  async getPlayer(ctx) {
    const player = await this.playerController.getPlayer(ctx);
    return player;
  }

  getGameByTitle(title) {
    return this.gameController.getGameByTitle(title);
  }

  getGameById(id) {
    return this.gameController.getGameById(id);
  }

  async handler(ctx) {
    const command = Parser.getCommand(ctx.message.text);
    if (!command) {
      return;
    }

    const player = await this.getPlayer(ctx);
    try {
      switch (command) {
        // TEST
        case '/test': await this.test(ctx, player); break;
        // START
        case '/start': await this.start(ctx, player); break;
        case '/game': await this.game(ctx, player); break;
        case '/delete': await this.delete(ctx, player); break;
        case '/gamelist': await this.gamelist(ctx, player); break;
        case '/join': await this.join(ctx, player); break;
        case '/b': await this.balance(ctx, player); break;
        case '/cube': await CommandHandler.cube(ctx, player); break; // TODO:  create another file for this func like toys.js
        // TABLE
        case '/leave': await this.leave(ctx, player); break;
        case '/here': await this.here(ctx, player); break;
        case '/say': await this.say(ctx, player); break;
        // POKER
        case '/begin': await this.begin(ctx, player); break;
        case '/bet': await this.bet(ctx, player); break;
        case '/call': await this.call(ctx, player); break;
        case '/fold': await this.fold(ctx, player); break;
        case '/raise': await this.raise(ctx, player); break;
        case '/check': await this.check(ctx, player); break;
        default: CommandHandler.unknown(ctx, player); break;
      }
    } catch (err) {
      console.log();
    }
  }

  async start(ctx, player) {
    await Sender.sendMessage(ctx, Text.greeting(player));
  }

  async balance(ctx, player) {
    await Sender.sendMessage(ctx, Text.balanceInfo(player));
  }

  async game(ctx, player) {
    if (player.game) {
      Sender.error(ctx, `–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –≥—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–∫–∏–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω—É(${player.game.title})`);
      return;
    }

    const title = Parser.getParam(ctx);

    if (!title) {
      Sender.error(ctx, '–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–∞–∑–≤—É –≥—Ä–∏.\n/game ___–Ω–∞–∑–≤–∞___ - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É ');
      return;
    }

    if (title.length < 3) {
      Sender.error(ctx, '–ù–∞–∑–≤–∞ –≥—Ä–∏ –ø–æ–≤–∏–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
      return;
    }

    if (title.length > 10) {
      Sender.error(ctx, '–ù–∞–∑–≤–∞ –≥—Ä–∏ –ø–æ–≤–∏–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –º–∞–∫—Å–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–∞');
      return;
    }

    const game = await this.gameController.createGame(player, title);
    player.joinTo(game);
    Sender.success(ctx, Text.gameCreated(game));
  }

  async delete(ctx, player) {
    if (!player.game) {
      Sender.error(ctx, '–í–∏ –Ω–µ –≥—Ä–∞—î—Ç–µ.');
      return;
    }

    if (player.game.owner.tid !== player.tid) {
      Sender.error(ctx, '–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—ñ–ª.');
      return;
    }

    this.gameController.deleteGame(player.game);

    Sender.success(ctx, '–ì—Ä–∞ –≤–∏–¥–∞–ª–µ–Ω–∞.');
  }

  async gamelist(ctx) {
    const { games } = this.gameController;

    if (games.length === 0) {
      Sender.sendMessage(ctx, 'üëæ –ü–æ–∫–∏ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —ñ–≥–æ—Ä.\n‚ñ´Ô∏è ***/game <–Ω–∞–∑–≤–∞>*** - —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É.');
      return;
    }

    let list = `üß§ ***–°–ø–∏—Å–æ–∫ —ñ–≥—Ä:***\n\n${spacer('#', 3)} ${spacer('–ê–¥–º—ñ–Ω', 12)} ${spacer('–°—Ç—ñ–ª', 15)} –ì—Ä–∞–≤—Ü—ñ\n`;
    list += `${spacer('', 50, '-')}\n`;
    for (let i = 0; i < games.length; i += 1) {
      const number = spacer(`${(i + 1)}`, 3);
      const admin = spacer(`@${games[i].owner.username}`, 12);
      const table = spacer(games[i].title, 15);
      const limit = `[${games[i].players.length}/10]`;

      list += `${number} ${admin} ***${table}*** ${limit}\n`;
    }

    Sender.sendMessage(ctx, list);
  }

  async join(ctx) {
    const player = await this.getPlayer(ctx);
    const gameTitle = Parser.getParam(ctx);
    const game = this.getGameByTitle(gameTitle);

    if (!game) {
      Sender.error(ctx, '–ì—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    if (game.players.length >= 10) {
      Sender.error(ctx, '–£ —Ü—ñ–π –≥—Ä—ñ –º–∞–∫—Å–∏–º—É–º —É—á–∞—Å–Ω–∏–∫—ñ–≤ - 10.');
      return;
    }

    if (player.game) {
      if (player.game.id === game.id) {
        Sender.error(ctx, '–í–∏ –≤–∂–µ –≤ —Ü—ñ–π –≥—Ä—ñ.');
        return;
      }
      Sender.error(ctx, `–î–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –Ω–æ–≤–æ—ó –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–æ–∫–∏–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω—É - ${player.game.title}\n‚ñ´Ô∏è ***/leave*** - —â–æ–± –ø–æ–∫–∏–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –≥—Ä—É.`);
      return;
    }

    player.joinTo(game);
    game.join(player);

    Sender.success(ctx, '–í–∏ –≤–¥–∞–ª–æ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—å –¥–æ –≥—Ä–∏.\n‚ñ´Ô∏è ***/here*** - —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤.');
    Sender.sendAll(game.players.filter(p => p !== player), `üêæ ***${player.getTitle()}*** –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –≥—Ä–∏.`);
  }

  async leave(ctx) {
    const player = await this.getPlayer(ctx);
    player.leave();

    Sender.success(ctx, '–í–∏ –ü–æ–∫–∏–Ω—É–ª–∏ –≥—Ä—É\n‚ñ´Ô∏è ***/gamelist*** - —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ —ñ–≥—Ä.');
  }

  async here(ctx) {
    const player = await this.getPlayer(ctx);

    if (!player.game) {
      Sender.error(ctx, '–í–∏ –Ω–µ –≥—Ä–∞—î—Ç–µ –≤ –∂–æ–¥–Ω—É –≥—Ä—É.\n‚ñ´Ô∏è ***/gamelist*** - —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ —ñ–≥—Ä.');
      return;
    }

    const { players } = player.game;

    let list = `üß§ ***–°–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤:***\n\n${spacer('#', 3)} –ì—Ä–∞–≤–µ—Ü—å\n`;
    list += `${spacer('', 50, '-')}\n`;
    for (let i = 0; i < players.length; i += 1) {
      const number = spacer(`${(i + 1)}`, 3);
      const playerTitle = spacer(`${players[i].getTitle()}`, 12);
      const isAdmin = players[i].tid === player.game.owner.tid ? '‚≠êÔ∏è' : '';
      list += `${number} ***${playerTitle}*** ${isAdmin}\n`;
    }

    Sender.sendMessage(ctx, list);
  }

  async say(ctx) {
    const player = await this.getPlayer(ctx);
    const { game } = player;
    if (!game) {
      Sender.error(ctx, '–í–∏ –Ω–µ –≥—Ä–∞—î—Ç–µ –≤ –∂–æ–¥–Ω—É –≥—Ä—É.');
      return;
    }

    const message = Parser.getParams(ctx).join(' ');
    const { players } = game;

    const sendQueue = [];
    players.forEach(p => sendQueue.push(Sender.toPlayer(p, `üí¨ ***${player.getTitle()}:*** ${message}`)));

    await Promise.all(sendQueue);
  }

  async begin(ctx) {
    const player = await this.getPlayer(ctx);
    const { game } = player;

    if (!player.game) {
      Sender.error(ctx, '–í–∏ –Ω–µ –≥—Ä–∞—î—Ç–µ –≤ –∂–æ–¥–Ω—É –≥—Ä—É!');
      return;
    }

    try {
      game.start(player);
    } catch (err) {
      Sender.error(ctx, err);
    }
  }

  async bet(ctx, player) {
    const { game } = player;
    if (!player.game) {
      Sender.error(ctx, '–í–∏ –Ω–µ –≥—Ä–∞—î—Ç–µ –≤ –∂–æ–¥–Ω—É –≥—Ä—É!');
      return;
    }
    const sum = +(Parser.getParam(ctx));
    try {
      game.move(player, moveType.bet, sum);
    } catch (err) {
      Sender.sendMessage(ctx, '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫... –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
      throw err;
    }
  }

  async call(ctx, player) {
    const { game } = player;
    if (!player.game) {
      Sender.error(ctx, '–í–∏ –Ω–µ –≥—Ä–∞—î—Ç–µ –≤ –∂–æ–¥–Ω—É –≥—Ä—É!');
      return;
    }

    try {
      game.move(player, moveType.call);
    } catch (err) {
      Sender.error(ctx, err);
      throw err;
    }
  }

  async fold(ctx, player) {
    const { game } = player;
    if (!player.game) {
      Sender.error(ctx, '–í–∏ –Ω–µ –≥—Ä–∞—î—Ç–µ –≤ –∂–æ–¥–Ω—É –≥—Ä—É!');
      return;
    }

    try {
      game.move(player, moveType.fold);
    } catch (err) {
      Sender.error(ctx, err);
      throw err;
    }
  }

  async raise(ctx, player) {
    const { game } = player;
    if (!player.game) {
      Sender.error(ctx, '–í–∏ –Ω–µ –≥—Ä–∞—î—Ç–µ –≤ –∂–æ–¥–Ω—É –≥—Ä—É!');
      return;
    }

    const sum = +(Parser.getParam(ctx));

    try {
      game.move(player, moveType.raise, sum);
    } catch (err) {
      Sender.error(ctx, err);
      throw err;
    }
  }

  async check(ctx, player) {
    const { game } = player;
    if (!player.game) {
      Sender.error(ctx, '–í–∏ –Ω–µ –≥—Ä–∞—î—Ç–µ –≤ –∂–æ–¥–Ω—É –≥—Ä—É!');
      return;
    }

    try {
      game.move(player, moveType.check);
    } catch (err) {
      Sender.error(ctx, err);
      throw err;
    }
  }

  static unknown(ctx) {
    Sender.error(ctx, `–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: ___${ctx.message.text}___`);
  }

  static cube(ctx) {
    const cube = (Date.now() % 6) + 1;

    Sender.sendMessage(ctx, `üé≤ ${cube}`);
  }

  async test(ctx, player) {
    const a = await PlayerModel.findOne({ tid: player.tid }).select('balance');
    console.log(a.balance);
  }
}

module.exports = CommandHandler;
